name: Elixir CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and test (Elixir ${{ matrix.elixir }} | OTP ${{ matrix.otp }} | Rust ${{ matrix.rust }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        elixir: ["1.17", "1.18"]
        otp: ["26", "27"]
        rust: ["1.85.1"]

    env:
      MIX_ENV: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Install system dependencies for V8
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev \
            libglib2.0-dev libglib2.0-0 libgtk-3-dev \
            libatk1.0-dev libatk-bridge2.0-dev libgdk-pixbuf2.0-dev \
            libpango1.0-dev libcairo2-dev libnss3-dev libxss-dev
      
      - name: Install V8 development packages on Linux
        if: runner.os == 'Linux'
        run: |
          # Install Deno which includes V8
          curl -fsSL https://deno.land/install.sh | sh
          echo "$HOME/.deno/bin" >> $GITHUB_PATH
          
          # Run our extraction script
          chmod +x ./scripts/extract_v8.sh
          ./scripts/extract_v8.sh
          
          # Copy the extracted libraries to system locations
          sudo cp -r v8_extract/lib/* /usr/local/lib/
          sudo cp -r v8_extract/include/* /usr/local/include/
          sudo ldconfig
          
          # Set environment variables for finding V8
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Set up environment for V8 compilation
        run: |
          # Set common environment variables
          echo "RUSTFLAGS=-C link-arg=-s" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "RUSTC_BOOTSTRAP=1" >> $GITHUB_ENV
          echo "CARGO_NET_RETRY=10" >> $GITHUB_ENV
          
          # Linux-specific settings
          if [ "$(uname)" = "Linux" ]; then
            echo "V8_FROM_SOURCE=0" >> $GITHUB_ENV
            echo "V8_FORCE_STATIC=0" >> $GITHUB_ENV
            echo "CFLAGS=-fPIC" >> $GITHUB_ENV
            echo "CXXFLAGS=-fPIC" >> $GITHUB_ENV
            echo "RUSTFLAGS=$RUSTFLAGS -C link-arg=-Wl,--no-as-needed -C link-arg=-ldl -C link-arg=-Wl,--allow-multiple-definition" >> $GITHUB_ENV
          else
            # macOS settings
            echo "V8_FROM_SOURCE=0" >> $GITHUB_ENV
            echo "V8_FORCE_STATIC=1" >> $GITHUB_ENV
          fi

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-${{ matrix.elixir }}-${{ matrix.otp }}-${{ matrix.rust }}"

      - name: Install dependencies
        run: mix deps.get

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run tests
        run: mix test
